/* The following code was generated by JFlex 1.4.3 on 7/9/18 3:44 PM */

package de.dfki.lt.hfc;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/9/18 3:44 PM from the specification file
 * <tt>/home/christian/Desktop/playground/hfc/src/main/java/de/dfki/lt/hfc/Query.jflex</tt>
 */
class QueryParser {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;
  /**
   * lexical states
   */
  public static final int AGGREGATE = 10;
  public static final int FILTER = 8;
  public static final int STRING = 2;
  public static final int WHERE = 6;
  public static final int YYINITIAL = 0;
  public static final int INTERVAL = 12;
  public static final int SELECT = 4;
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\64\1\54" +
                  "\1\7\2\0\1\63\1\55\1\47\1\50\1\62\1\0\1\61\3\0" +
                  "\4\56\4\11\2\0\1\5\1\0\1\4\1\65\1\6\1\12\1\0" +
                  "\1\26\1\51\1\23\1\32\1\21\1\44\1\46\1\41\1\33\2\0" +
                  "\1\22\1\52\1\34\1\53\2\0\1\42\1\20\1\24\2\0\1\40" +
                  "\3\0\1\47\1\10\1\50\1\57\1\0\1\0\1\25\1\55\1\16" +
                  "\1\27\1\14\1\43\1\45\1\36\1\30\2\0\1\15\1\0\1\31" +
                  "\3\0\1\37\1\13\1\17\1\55\1\0\1\35\1\60\14\0\1\0" +
                  "\u1fa2\0\1\0\1\0\udfd6\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
  private static final String ZZ_ACTION_PACKED_0 =
          "\11\0\1\1\2\2\1\0\1\3\1\4\1\5\5\4" +
                  "\1\6\3\7\1\10\4\7\1\10\1\11\1\7\1\12" +
                  "\1\7\1\13\1\14\1\15\5\14\1\12\1\14\1\16" +
                  "\1\14\1\17\1\20\2\17\1\21\2\22\1\23\1\24" +
                  "\1\22\3\0\1\25\3\1\1\26\5\0\1\27\1\10" +
                  "\3\0\1\10\2\0\5\14\1\5\1\17\1\30\1\31" +
                  "\16\0\3\14\1\32\1\14\1\17\17\0\5\14\1\17" +
                  "\7\0\1\33\1\14\6\0\1\32\4\14\1\32\2\0" +
                  "\3\34\4\0\1\35\2\0\4\14\10\0\1\36\1\0" +
                  "\2\14\1\36\1\14\1\37\3\0\1\40\3\0\3\14" +
                  "\1\0\1\41\1\42\1\43\1\44\1\43\1\45";
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a" +
                  "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u0252\0\u0252\0\u0252" +
                  "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u0252\0\u0252\0\u03cc" +
                  "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u0252" +
                  "\0\u057c\0\u0252\0\u05b2\0\u0252\0\u05e8\0\u0252\0\u061e\0\u0402" +
                  "\0\u0654\0\u068a\0\u06c0\0\u05e8\0\u06f6\0\u05e8\0\u072c\0\u0762" +
                  "\0\u0252\0\u0798\0\u07ce\0\u0762\0\u0252\0\u0804\0\u0252\0\u0252" +
                  "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0252\0\u0252\0\u0912\0\u0948" +
                  "\0\u02be\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0402\0\u0252" +
                  "\0\u0a8c\0\u0ac2\0\u0af8\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0" +
                  "\0\u0c06\0\u0c3c\0\u0c72\0\u05e8\0\u0ca8\0\u07ce\0\u0804\0\u0cde" +
                  "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e" +
                  "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e" +
                  "\0\u05e8\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8" +
                  "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368" +
                  "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518" +
                  "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u0252" +
                  "\0\u1290\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u140a" +
                  "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u1518\0\u18e4\0\u191a\0\u1950" +
                  "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u0252\0\u1aca" +
                  "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a" +
                  "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1aca\0\u1dbe\0\u1df4" +
                  "\0\u1e2a\0\u1ba2\0\u1e60\0\u1c0e\0\u1e96\0\u1ecc\0\u1f02\0\u0252" +
                  "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u0252" +
                  "\0\u0252\0\u1fa4\0\u05e8\0\u2046\0\u207c";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_TRANS_PACKED_0 =
          "\13\0\1\10\4\0\1\11\45\0\1\12\1\13\1\14" +
                  "\5\12\1\15\43\12\1\16\11\12\2\17\1\0\1\20" +
                  "\6\17\1\21\14\17\1\22\2\17\1\23\2\17\1\24" +
                  "\2\17\1\25\21\17\1\26\3\17\2\27\1\0\1\20" +
                  "\1\30\5\27\1\31\5\27\1\32\1\33\3\27\1\34" +
                  "\1\35\3\27\1\32\10\27\1\36\1\37\2\27\1\40" +
                  "\1\27\1\41\2\32\1\42\2\27\1\43\3\27\1\44" +
                  "\2\27\1\45\1\46\1\0\1\20\1\47\5\45\1\50" +
                  "\12\45\1\51\1\52\5\45\1\53\17\45\1\54\2\45" +
                  "\1\55\3\45\1\56\1\57\1\45\1\60\1\61\1\0" +
                  "\1\20\1\62\5\60\1\63\50\60\1\64\2\60\2\65" +
                  "\1\0\1\20\6\65\1\66\35\65\1\67\3\65\1\70" +
                  "\2\65\1\71\1\65\1\20\4\65\14\0\1\72\65\0" +
                  "\1\73\4\0\1\74\44\0\1\12\2\0\5\12\1\0" +
                  "\43\12\1\0\11\12\2\0\1\14\151\0\2\75\1\0" +
                  "\5\75\1\76\1\77\5\75\1\76\11\75\1\76\5\75" +
                  "\1\76\3\75\1\76\10\75\2\76\1\100\7\75\1\101" +
                  "\3\0\62\101\30\0\1\102\65\0\1\102\2\0\1\103" +
                  "\70\0\1\104\65\0\1\104\2\0\1\105\24\0\1\106" +
                  "\3\0\62\106\1\107\3\0\62\107\30\0\1\110\63\0" +
                  "\1\110\104\0\1\111\63\0\1\110\1\0\1\111\1\112" +
                  "\47\0\1\113\65\0\1\114\2\0\1\115\75\0\1\110" +
                  "\101\0\1\116\6\0\1\45\3\0\62\45\1\117\3\0" +
                  "\62\117\1\45\3\0\41\45\1\120\21\45\3\0\41\45" +
                  "\1\120\1\121\20\45\3\0\47\45\1\122\13\45\3\0" +
                  "\53\45\1\123\7\45\3\0\61\45\1\124\1\60\3\0" +
                  "\62\60\1\125\3\0\62\125\1\126\3\0\62\126\1\127" +
                  "\3\0\62\127\57\0\1\130\23\0\1\131\65\0\1\132" +
                  "\72\0\1\133\54\0\1\76\44\0\1\76\20\0\1\77" +
                  "\44\0\1\77\22\0\1\134\72\0\1\135\61\0\1\136" +
                  "\72\0\1\137\44\0\1\106\3\0\1\106\1\140\1\106" +
                  "\1\140\56\106\45\0\1\141\66\0\1\142\34\0\1\143" +
                  "\72\0\1\144\47\0\1\145\61\0\1\117\3\0\1\117" +
                  "\1\146\1\117\1\146\56\117\1\45\3\0\41\45\1\147" +
                  "\21\45\3\0\42\45\1\150\20\45\3\0\20\45\1\151" +
                  "\42\45\3\0\1\152\61\45\1\125\3\0\1\125\1\153" +
                  "\1\125\1\153\56\125\4\0\1\154\75\0\1\155\65\0" +
                  "\1\156\72\0\1\157\63\0\1\160\72\0\1\161\100\0" +
                  "\1\162\70\0\1\163\23\0\1\164\3\0\62\164\37\0" +
                  "\1\165\70\0\1\166\42\0\1\167\72\0\1\170\41\0" +
                  "\1\171\3\0\54\171\1\172\5\171\1\173\3\0\62\173" +
                  "\1\45\3\0\33\45\1\174\27\45\3\0\36\45\1\175" +
                  "\23\45\1\176\3\0\54\176\1\177\5\176\1\200\3\0" +
                  "\62\200\1\201\3\0\54\201\1\202\5\201\16\0\1\203" +
                  "\65\0\1\204\72\0\1\205\72\0\1\206\70\0\1\207" +
                  "\46\0\1\210\72\0\1\210\44\0\1\164\3\0\2\164" +
                  "\1\211\57\164\14\0\1\212\72\0\1\213\60\0\1\214" +
                  "\72\0\1\215\44\0\1\171\3\0\3\171\1\216\57\171" +
                  "\3\0\3\171\1\216\3\171\1\217\52\171\1\173\3\0" +
                  "\2\173\1\220\57\173\1\45\3\0\10\45\1\221\52\45" +
                  "\3\0\15\45\1\222\44\45\1\176\3\0\3\176\1\223" +
                  "\57\176\3\0\3\176\1\223\3\176\1\224\52\176\1\200" +
                  "\3\0\2\200\1\225\57\200\1\201\3\0\3\201\1\226" +
                  "\57\201\3\0\3\201\1\226\3\201\1\227\52\201\17\0" +
                  "\1\230\65\0\1\231\72\0\1\232\72\0\1\233\70\0" +
                  "\1\234\76\0\1\235\66\0\1\236\56\0\1\237\70\0" +
                  "\1\237\23\0\1\240\3\0\62\240\1\171\3\0\3\171" +
                  "\1\216\17\171\1\241\36\171\1\45\3\0\41\45\1\242" +
                  "\21\45\3\0\42\45\1\243\17\45\1\244\3\0\62\244" +
                  "\1\176\3\0\3\176\1\223\17\176\1\245\36\176\1\246" +
                  "\3\0\62\246\1\201\3\0\3\201\1\226\17\201\1\247" +
                  "\36\201\25\0\1\250\66\0\1\250\65\0\1\251\55\0" +
                  "\1\252\72\0\1\253\67\0\1\254\66\0\1\255\37\0" +
                  "\1\240\3\0\2\240\1\256\57\240\1\171\3\0\1\171" +
                  "\1\257\1\171\1\216\56\171\1\45\3\0\21\45\1\260" +
                  "\41\45\3\0\22\45\1\261\37\45\1\244\3\0\2\244" +
                  "\1\262\57\244\1\176\3\0\1\176\1\263\1\176\1\223" +
                  "\56\176\1\246\3\0\2\246\1\264\57\246\1\201\3\0" +
                  "\1\201\1\265\1\201\1\226\56\201\15\0\1\266\72\0" +
                  "\1\267\62\0\1\270\72\0\1\270\60\0\1\271\72\0" +
                  "\1\272\41\0\1\273\3\0\62\273\1\45\3\0\13\45" +
                  "\1\274\47\45\3\0\20\45\1\275\41\45\1\276\3\0" +
                  "\62\276\1\277\3\0\62\277\15\0\1\300\72\0\1\300" +
                  "\57\0\1\301\72\0\1\301\44\0\1\273\3\0\2\273" +
                  "\1\302\57\273\1\45\3\0\10\45\1\303\52\45\3\0" +
                  "\15\45\1\303\44\45\1\276\3\0\2\276\1\304\57\276" +
                  "\1\277\3\0\2\277\1\305\57\277";
  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\11\0\2\1\1\11\1\0\3\11\5\1\2\11\10\1" +
                  "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\12\1" +
                  "\1\11\3\1\1\11\1\1\2\11\1\1\3\0\2\11" +
                  "\3\1\5\0\1\1\1\11\3\0\1\1\2\0\11\1" +
                  "\16\0\6\1\17\0\6\1\7\0\1\11\1\1\6\0" +
                  "\6\1\2\0\3\1\4\0\1\11\2\0\4\1\10\0" +
                  "\1\1\1\0\5\1\3\0\1\11\3\0\3\1\1\0" +
                  "\2\11\4\1";
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  /* user code: */
  private static final Logger logger = LoggerFactory.getLogger(QueryParser.class);
  public HashSet<String> projectedVars = new LinkedHashSet<String>();
  public ArrayList<ArrayList<String>> whereClauses = new ArrayList<ArrayList<String>>();
  public ArrayList<ArrayList<String>> filterClauses = new ArrayList<ArrayList<String>>();
  public ArrayList<ArrayList<String>> aggregateClauses = new ArrayList<ArrayList<String>>();
  public HashSet<String> aggregateVars = new HashSet<>();
  public HashSet<String> foundVars = new HashSet<String>();
  public boolean hasAggregate = false;
  public boolean hasFilter = false;
  /**
   * the input device
   */
  private java.io.Reader zzReader;
  /**
   * the current state of the DFA
   */
  private int zzState;
  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;
  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;
  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;
  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;
  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;
  /**
   * number of newlines encountered up to the start of the matched text
   */
  private int yyline;
  /**
   * the number of characters up to the start of the matched text
   */
  private int yychar;
  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;
  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;
  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;
  private TupleStore ts;
  private StringBuffer string = new StringBuffer();
  private boolean distinct = false;
  private boolean expandProxy = false;
  private ArrayList<String> clause = new ArrayList<>();
  private int state;
  private boolean rhs = false;
  private boolean interval = false;
  private String start;
  private int c = 0;
  private boolean isRelation = false;
  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param in the java.io.Reader to read input from.
   */
  QueryParser(java.io.Reader in, TupleStore tuplestore) {
    ts = tuplestore;
    this.zzReader = in;
  }
  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  QueryParser(java.io.InputStream in, TupleStore tuplestore) {
    this(new java.io.InputStreamReader(in), tuplestore);
  }

  private static int[] zzUnpackAction() {
    int[] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int[] zzUnpackRowMap() {
    int[] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  private static int[] zzUnpackTrans() {
    int[] result = new int[8370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int[] zzUnpackAttribute() {
    int[] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public boolean isDistinct() {
    return this.distinct;
  }

  public boolean isExpandProxy() {
    return this.expandProxy;
  }

  private void handleVar(String var) throws QueryParseException {
    if (this.state == FILTER) {
      logger.debug(" foundVars " + foundVars);
      logger.debug(" Var " + var);
      if (!this.foundVars.contains(var))
        throw new QueryParseException("unknown variable " + var + " used in FILTER");
    }
    //add to clause
    this.clause.add(var);
    //add to foundVars
    this.foundVars.add(var);
  }

  private void closeWhereClauses() throws QueryParseException {
    this.whereClauses.add(clause);
    if (whereClauses.isEmpty()) throw new QueryParseException("Missing where clauses");
    if (projectedVars.contains("*")) {
      // a "*" should not come up with further vars
      if (projectedVars.size() > 1)
        throw new QueryParseException("\"*\" and further variables can not be mixed");
    } else {
      // projected vars should only consist of found vars
      HashSet<String> pv = new HashSet<String>(projectedVars);
      pv.removeAll(foundVars);
      if (!pv.isEmpty())
        throw new QueryParseException("SELECT contains variables not found in WHERE: " + pv);
    }
    clause = new ArrayList<>();
  }

  private void closeFilterClauses() {
    this.filterClauses.add(clause);
    clause = new ArrayList<>();
  }

  private void closeAggregateClauses() {
    this.aggregateClauses.add(clause);
    clause = new ArrayList<>();
  }

  private void handleEOF() throws QueryParseException {
    switch (state) {
      case (WHERE): {
        closeWhereClauses();
        break;
      }
      case (FILTER): {
        closeFilterClauses();
        break;
      }
      case (AGGREGATE): {
        closeAggregateClauses();
        break;
      }
      default: {
        throw new QueryParseException("Invalid query");
      }
    }
  }

  public void parse() throws IOException, QueryParseException {
    while (!zzAtEOF) {
      yylex();
    }
  }

  private String handleUnicode(String match) {
    Pattern p = Pattern.compile("\\\\u(\\p{XDigit}{4})");
    Matcher m = p.matcher(match);
    StringBuffer buf = new StringBuffer(match.length());
    while (m.find()) {
      String ch = String.valueOf((char) Integer.parseInt(m.group(1), 16));
      m.appendReplacement(buf, Matcher.quoteReplacement(ch));
    }
    m.appendTail(buf);
    return buf.toString();

  }

  private void closeRelation(String end) {
    c = 0;
    interval = false;
    isRelation = false;
    this.clause.add(start + end);
    yybegin(state);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
            zzBuffer.length - zzEndRead);

    if (numRead > 0) {
      zzEndRead += numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

    // numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * <p>
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws QueryParseException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      handleEOF();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException, QueryParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: {
          closeRelation(yytext());
        }
        case 38:
          break;
        case 36: {
          hasAggregate = true;
          state = AGGREGATE;
          closeFilterClauses();
          yybegin(AGGREGATE);
        }
        case 39:
          break;
        case 33: {
          this.expandProxy = true;
          yybegin(SELECT);
        }
        case 40:
          break;
        case 13: {
          throw new QueryParseException("Invalid FILTER statement " + yytext());
        }
        case 41:
          break;
        case 14: {
          this.filterClauses.add(clause);
          clause = new ArrayList<>();
        }
        case 42:
          break;
        case 8: {
          isRelation = true;
          start = yytext();
          state = WHERE;
          yybegin(INTERVAL);
        }
        case 43:
          break;
        case 32: {
          distinct = true;
        }
        case 44:
          break;
        case 12: {
          this.clause.add(yytext());
        }
        case 45:
          break;
        case 20: {
          interval = true;
          yybegin(STRING);
        }
        case 46:
          break;
        case 22: {
          this.projectedVars.add(yytext());
        }
        case 47:
          break;
        case 9: {
          start = yytext();
          state = WHERE;
          yybegin(INTERVAL);
        }
        case 48:
          break;
        case 11: {
          this.whereClauses.add(clause);
          clause = new ArrayList<>();
        }
        case 49:
          break;
        case 25: {
          c++;
          handleVar(yytext());
          if (c == 2) closeRelation("");
        }
        case 50:
          break;
        case 2: {
          throw new RuntimeException("Unterminated string at end of line");
        }
        case 51:
          break;
        case 23: {
          handleVar(yytext());
        }
        case 52:
          break;
        case 34: {
          hasAggregate = true;
          state = AGGREGATE;
          closeWhereClauses();
          yybegin(AGGREGATE);
        }
        case 53:
          break;
        case 27: {
          state = WHERE;
          yybegin(WHERE);
        }
        case 54:
          break;
        case 35: {
          clause.add("\"" + handleUnicode(string.toString()) + "\"" + yytext());
          string.setLength(0);
        }
        case 55:
          break;
        case 29: {
          hasFilter = true;
          state = FILTER;
          closeWhereClauses();
          yybegin(FILTER);
        }
        case 56:
          break;
        case 24: {
          if (rhs)
            handleVar(yytext());
          else {
            clause.add(yytext());
            aggregateVars.add(yytext());
          }
        }
        case 57:
          break;
        case 28: {
          yybegin(SELECT);
        }
        case 58:
          break;
        case 3: {
          if (interval) yybegin(INTERVAL);
          else yybegin(state);
        }
        case 59:
          break;
        case 26: {
          clause.add(yytext());
        }
        case 60:
          break;
        case 10: {
          yybegin(STRING);
        }
        case 61:
          break;
        case 30: {
          clause.add("\"" + handleUnicode(string.toString()) + "\"" + yytext());

          string.setLength(0);
        }
        case 62:
          break;
        case 15: {
          this.clause.add(yytext());
          rhs = true;
        }
        case 63:
          break;
        case 18: {
          throw new QueryParseException();
        }
        case 64:
          break;
        case 37: {
          c++;
          clause.add("\"" + handleUnicode(string.toString()) + "\"" + yytext());
          string.setLength(0);
          if (c == 2) if (isRelation) closeRelation("");
        }
        case 65:
          break;
        case 31: {
          c++;
          clause.add("\"" + handleUnicode(string.toString()) + "\"" + yytext());
          string.setLength(0);
          if (c == 2) if (isRelation) closeRelation("");
        }
        case 66:
          break;
        case 6: {
          projectedVars.add("*");
        }
        case 67:
          break;
        case 7: {
          throw new QueryParseException("Invalid WHERE statement " + yytext());
        }
        case 68:
          break;
        case 16: {
          throw new QueryParseException("Invalid AGGREGATE statement " + yytext());
        }
        case 69:
          break;
        case 4: {
          throw new QueryParseException("Invalid select statement " + yytext());
        }
        case 70:
          break;
        case 1: {
          string.append(yytext());
        }
        case 71:
          break;
        case 21: {
          throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
        }
        case 72:
          break;
        case 17: {
          this.aggregateClauses.add(clause);
          clause = new ArrayList<>();
          rhs = false;
        }
        case 73:
          break;
        case 5: {
        }
        case 74:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
