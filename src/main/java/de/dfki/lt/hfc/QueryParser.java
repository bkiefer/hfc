/* The following code was generated by JFlex 1.4.3 on 28/09/2022, 12:52 */

package de.dfki.lt.hfc;

import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import de.dfki.lt.hfc.types.XsdString;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/09/2022, 12:52 from the specification file
 * <tt>/home/kiefer/src/java/hfc/src/main/java/de/dfki/lt/hfc/Query.jflex</tt>
 */
class QueryParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AGGREGATE = 10;
  public static final int FILTER = 8;
  public static final int STRING = 2;
  public static final int WHERE = 6;
  public static final int YYINITIAL = 0;
  public static final int INTERVAL = 12;
  public static final int SELECT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\65\1\55"+
    "\1\7\2\0\1\64\1\56\1\50\1\51\1\63\1\0\1\62\3\0"+
    "\4\57\4\12\2\0\1\5\1\0\1\4\1\66\1\6\1\13\1\0"+
    "\1\27\1\52\1\24\1\33\1\22\1\45\1\47\1\42\1\34\2\0"+
    "\1\23\1\53\1\35\1\54\2\0\1\43\1\21\1\25\2\0\1\41"+
    "\3\0\1\50\1\11\1\51\1\60\1\10\1\0\1\26\1\56\1\17"+
    "\1\30\1\15\1\44\1\46\1\37\1\31\2\0\1\16\1\0\1\32"+
    "\3\0\1\40\1\14\1\20\1\56\1\0\1\36\1\61\14\0\1\0"+
    "\u1fa2\0\1\0\1\0\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\0\1\3\1\4\1\5\5\4"+
    "\1\6\4\7\1\10\4\7\1\10\1\11\1\7\1\12"+
    "\1\7\1\13\1\14\1\15\5\14\1\12\1\14\1\16"+
    "\1\14\1\17\1\20\2\17\1\21\2\22\1\23\1\24"+
    "\1\22\3\0\1\25\3\1\1\26\6\0\1\27\1\10"+
    "\3\0\1\10\2\0\5\14\1\5\1\17\1\30\1\31"+
    "\16\0\3\14\1\32\1\14\1\17\17\0\5\14\1\17"+
    "\7\0\1\33\1\14\6\0\1\32\4\14\1\32\2\0"+
    "\3\34\4\0\1\35\2\0\4\14\10\0\1\36\1\0"+
    "\2\14\1\36\1\14\1\37\3\0\1\40\3\0\3\14"+
    "\1\0\1\41\1\42\1\43\1\44\1\43\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u025d\0\u025d\0\u025d"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u025d\0\u025d\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u025d\0\u05cd\0\u025d\0\u0604\0\u025d\0\u063b\0\u025d\0\u0672"+
    "\0\u044c\0\u06a9\0\u06e0\0\u0717\0\u063b\0\u074e\0\u063b\0\u0785"+
    "\0\u07bc\0\u025d\0\u07f3\0\u082a\0\u07bc\0\u025d\0\u0861\0\u025d"+
    "\0\u025d\0\u0898\0\u08cf\0\u0906\0\u093d\0\u025d\0\u025d\0\u0974"+
    "\0\u09ab\0\u02cb\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u063b"+
    "\0\u044c\0\u025d\0\u0af5\0\u0b2c\0\u0b63\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u063b\0\u0d1b\0\u082a"+
    "\0\u0861\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u063b\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d"+
    "\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u025d\0\u131f\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u14a0\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u15b3\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u025d\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1b80"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1c5c\0\u1f27\0\u1cca\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u025d\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u025d\0\u025d\0\u2071\0\u063b\0\u2116\0\u214d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\0\1\10\4\0\1\11\45\0\1\12\1\13\1\14"+
    "\6\12\1\15\43\12\1\16\11\12\2\17\1\0\1\20"+
    "\7\17\1\21\14\17\1\22\2\17\1\23\2\17\1\24"+
    "\2\17\1\25\21\17\1\26\3\17\2\27\1\0\1\20"+
    "\1\30\3\27\1\31\2\27\1\32\5\27\1\33\1\34"+
    "\3\27\1\35\1\36\3\27\1\33\10\27\1\37\1\40"+
    "\2\27\1\41\1\27\1\42\2\33\1\43\2\27\1\44"+
    "\3\27\1\45\2\27\1\46\1\47\1\0\1\20\1\50"+
    "\6\46\1\51\12\46\1\52\1\53\5\46\1\54\17\46"+
    "\1\55\2\46\1\56\3\46\1\57\1\60\1\46\1\61"+
    "\1\62\1\0\1\20\1\63\6\61\1\64\50\61\1\65"+
    "\2\61\2\66\1\0\1\20\7\66\1\67\35\66\1\70"+
    "\3\66\1\71\2\66\1\72\1\66\1\20\4\66\15\0"+
    "\1\73\66\0\1\74\4\0\1\75\44\0\1\12\2\0"+
    "\6\12\1\0\43\12\1\0\11\12\2\0\1\14\153\0"+
    "\2\76\1\0\6\76\1\77\1\100\5\76\1\77\11\76"+
    "\1\77\5\76\1\77\3\76\1\77\10\76\2\77\1\101"+
    "\7\76\1\102\3\0\63\102\31\0\1\103\66\0\1\103"+
    "\2\0\1\104\71\0\1\105\66\0\1\105\2\0\1\106"+
    "\24\0\1\107\3\0\63\107\5\0\1\110\61\0\1\111"+
    "\3\0\63\111\31\0\1\112\64\0\1\112\105\0\1\113"+
    "\64\0\1\112\1\0\1\113\1\114\50\0\1\115\66\0"+
    "\1\116\2\0\1\117\76\0\1\112\102\0\1\120\6\0"+
    "\1\46\3\0\63\46\1\121\3\0\63\121\1\46\3\0"+
    "\42\46\1\122\21\46\3\0\42\46\1\122\1\123\20\46"+
    "\3\0\50\46\1\124\13\46\3\0\54\46\1\125\7\46"+
    "\3\0\62\46\1\126\1\61\3\0\63\61\1\127\3\0"+
    "\63\127\1\130\3\0\63\130\1\131\3\0\63\131\60\0"+
    "\1\132\24\0\1\133\66\0\1\134\73\0\1\135\55\0"+
    "\1\77\44\0\1\77\21\0\1\100\44\0\1\100\23\0"+
    "\1\136\73\0\1\137\62\0\1\140\73\0\1\141\44\0"+
    "\1\107\3\0\1\107\1\142\1\107\1\142\57\107\46\0"+
    "\1\143\67\0\1\144\35\0\1\145\73\0\1\146\47\0"+
    "\1\147\62\0\1\121\3\0\1\121\1\150\1\121\1\150"+
    "\57\121\1\46\3\0\42\46\1\151\21\46\3\0\43\46"+
    "\1\152\20\46\3\0\21\46\1\153\42\46\3\0\1\154"+
    "\62\46\1\127\3\0\1\127\1\155\1\127\1\155\57\127"+
    "\4\0\1\156\77\0\1\157\66\0\1\160\73\0\1\161"+
    "\64\0\1\162\73\0\1\163\101\0\1\164\71\0\1\165"+
    "\23\0\1\166\3\0\63\166\40\0\1\167\71\0\1\170"+
    "\43\0\1\171\73\0\1\172\41\0\1\173\3\0\55\173"+
    "\1\174\5\173\1\175\3\0\63\175\1\46\3\0\34\46"+
    "\1\176\27\46\3\0\37\46\1\177\23\46\1\200\3\0"+
    "\55\200\1\201\5\200\1\202\3\0\63\202\1\203\3\0"+
    "\55\203\1\204\5\203\17\0\1\205\66\0\1\206\73\0"+
    "\1\207\73\0\1\210\71\0\1\211\47\0\1\212\73\0"+
    "\1\212\44\0\1\166\3\0\2\166\1\213\60\166\15\0"+
    "\1\214\73\0\1\215\61\0\1\216\73\0\1\217\44\0"+
    "\1\173\3\0\3\173\1\220\60\173\3\0\3\173\1\220"+
    "\4\173\1\221\52\173\1\175\3\0\2\175\1\222\60\175"+
    "\1\46\3\0\11\46\1\223\52\46\3\0\16\46\1\224"+
    "\44\46\1\200\3\0\3\200\1\225\60\200\3\0\3\200"+
    "\1\225\4\200\1\226\52\200\1\202\3\0\2\202\1\227"+
    "\60\202\1\203\3\0\3\203\1\230\60\203\3\0\3\203"+
    "\1\230\4\203\1\231\52\203\20\0\1\232\66\0\1\233"+
    "\73\0\1\234\73\0\1\235\71\0\1\236\77\0\1\237"+
    "\67\0\1\240\57\0\1\241\71\0\1\241\23\0\1\242"+
    "\3\0\63\242\1\173\3\0\3\173\1\220\20\173\1\243"+
    "\36\173\1\46\3\0\42\46\1\244\21\46\3\0\43\46"+
    "\1\245\17\46\1\246\3\0\63\246\1\200\3\0\3\200"+
    "\1\225\20\200\1\247\36\200\1\250\3\0\63\250\1\203"+
    "\3\0\3\203\1\230\20\203\1\251\36\203\26\0\1\252"+
    "\67\0\1\252\66\0\1\253\56\0\1\254\73\0\1\255"+
    "\70\0\1\256\67\0\1\257\37\0\1\242\3\0\2\242"+
    "\1\260\60\242\1\173\3\0\1\173\1\261\1\173\1\220"+
    "\57\173\1\46\3\0\22\46\1\262\41\46\3\0\23\46"+
    "\1\263\37\46\1\246\3\0\2\246\1\264\60\246\1\200"+
    "\3\0\1\200\1\265\1\200\1\225\57\200\1\250\3\0"+
    "\2\250\1\266\60\250\1\203\3\0\1\203\1\267\1\203"+
    "\1\230\57\203\16\0\1\270\73\0\1\271\63\0\1\272"+
    "\73\0\1\272\61\0\1\273\73\0\1\274\41\0\1\275"+
    "\3\0\63\275\1\46\3\0\14\46\1\276\47\46\3\0"+
    "\21\46\1\277\41\46\1\300\3\0\63\300\1\301\3\0"+
    "\63\301\16\0\1\302\73\0\1\302\60\0\1\303\73\0"+
    "\1\303\44\0\1\275\3\0\2\275\1\304\60\275\1\46"+
    "\3\0\11\46\1\305\52\46\3\0\16\46\1\305\44\46"+
    "\1\300\3\0\2\300\1\306\60\300\1\301\3\0\2\301"+
    "\1\307\60\301";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\1\1\11\1\0\3\11\5\1\2\11\11\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\12\1"+
    "\1\11\3\1\1\11\1\1\2\11\1\1\3\0\2\11"+
    "\3\1\6\0\1\1\1\11\3\0\1\1\2\0\11\1"+
    "\16\0\6\1\17\0\6\1\7\0\1\11\1\1\6\0"+
    "\6\1\2\0\3\1\4\0\1\11\2\0\4\1\10\0"+
    "\1\1\1\0\5\1\3\0\1\11\3\0\3\1\1\0"+
    "\2\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private static final Logger logger = LoggerFactory.getLogger(QueryParser.class);
   private TupleStore ts;
   private StringBuffer string = new StringBuffer();
   public HashSet<String> projectedVars = new LinkedHashSet<String>();
   public ArrayList<ArrayList<String>> whereClauses = new ArrayList<ArrayList<String>>();
   public ArrayList<ArrayList<String>> filterClauses = new ArrayList<ArrayList<String>>();
   public ArrayList<ArrayList<String>> aggregateClauses = new ArrayList<ArrayList<String>>();
   public HashSet<String> aggregateVars = new HashSet<>();
   public HashSet<String> foundVars = new HashSet<String>();
   private boolean distinct = false;
   private boolean expandProxy = false;
   public boolean hasAggregate = false;
   public boolean hasFilter = false;
   private ArrayList<String> clause = new ArrayList<>();
   private int state;
   private boolean rhs = false;
   private boolean interval = false;
   private String start;
   private int c = 0;
   private boolean isRelation = false;

   public boolean isDistinct(){
       return this.distinct;
   }

   public boolean isExpandProxy(){
       return this.expandProxy;
   }

   private void handleVar(String var) throws QueryParseException {
       if(this.state == FILTER){
           logger.info(" foundVars " + foundVars);
               logger.info(" Var " + var);
               if(!this.foundVars.contains(var))
                   throw new QueryParseException("unknown variable " + var + " used in FILTER");
       }
        //add to clause
        this.clause.add(var);
        //add to foundVars
        this.foundVars.add(var);
   }

   private void closeWhereClauses() throws QueryParseException {
       this.whereClauses.add(clause);
       if (whereClauses.isEmpty()) throw new QueryParseException("Missing where clauses");
       if (projectedVars.contains("*")) {
           // a "*" should not come up with further vars
           if (projectedVars.size() > 1)
               throw new QueryParseException("\"*\" and further variables can not be mixed");
           }
       else {
            // projected vars should only consist of found vars
            HashSet<String> pv = new HashSet<String>(projectedVars);
            pv.removeAll(foundVars);
            if (! pv.isEmpty())
                throw new QueryParseException("SELECT contains variables not found in WHERE: " + pv);
            }
       clause = new ArrayList<>();
   }

   private void closeFilterClauses(){ this.filterClauses.add(clause);
   clause = new ArrayList<>();}

   private void closeAggregateClauses(){this.aggregateClauses.add(clause); clause = new ArrayList<>();}

   private void handleEOF() throws QueryParseException {
        switch (state){
            case(WHERE):{
                closeWhereClauses();
                break;
            }
            case (FILTER):{
                closeFilterClauses();
                break;
            }
            case (AGGREGATE): {
                closeAggregateClauses();
                break;
            }
            default:{
                throw new QueryParseException("Invalid query");
            }
        }
     }

     public void parse() throws IOException, QueryParseException{
       while ( !zzAtEOF ){
               yylex();
             }
     }

     private String handleUnicode(String match){
              Pattern p = Pattern.compile("\\\\u(\\p{XDigit}{4})");
              Matcher m = p.matcher(match);
              StringBuffer buf = new StringBuffer(match.length());
              while (m.find()) {
              String ch = String.valueOf((char) Integer.parseInt(m.group(1), 16));
                 m.appendReplacement(buf, Matcher.quoteReplacement(ch));
              }
              m.appendTail(buf);
              return buf.toString();

       }

       private void closeRelation(String end){
        c = 0;
        interval = false;
        isRelation = false;
        this.clause.add(start + end);
        yybegin(state);
       }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  QueryParser(java.io.Reader in, TupleStore tuplestore) {
    ts = tuplestore;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  QueryParser(java.io.InputStream in, TupleStore tuplestore) {
    this(new java.io.InputStreamReader(in), tuplestore);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws     QueryParseException
 {
    if (!zzEOFDone) {
      zzEOFDone = true;
        handleEOF();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException,   QueryParseException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { closeRelation( yytext());
          }
        case 38: break;
        case 37: 
          { c++;
                           clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
                           string.setLength(0);if(c==2)if(isRelation)closeRelation("");
          }
        case 39: break;
        case 36: 
          { hasAggregate = true;  state = AGGREGATE; closeFilterClauses();
                     yybegin(AGGREGATE);
          }
        case 40: break;
        case 33: 
          { this.expandProxy = true;
            yybegin(SELECT);
          }
        case 41: break;
        case 13: 
          { throw new QueryParseException("Invalid FILTER statement " + yytext());
          }
        case 42: break;
        case 14: 
          { this.filterClauses.add(clause);
   clause = new ArrayList<>();
          }
        case 43: break;
        case 8: 
          { isRelation = true; start = yytext(); state = WHERE; yybegin(INTERVAL);
          }
        case 44: break;
        case 32: 
          { distinct = true;
          }
        case 45: break;
        case 12: 
          { this.clause.add(yytext());
          }
        case 46: break;
        case 20: 
          { interval = true; yybegin(STRING);
          }
        case 47: break;
        case 22: 
          { this.projectedVars.add(yytext());
          }
        case 48: break;
        case 9: 
          { start = yytext(); state = WHERE; yybegin(INTERVAL);
          }
        case 49: break;
        case 11: 
          { this.whereClauses.add(clause);
clause = new ArrayList<>();
          }
        case 50: break;
        case 30: 
          { clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());

                            string.setLength(0);
          }
        case 51: break;
        case 25: 
          { c++; handleVar(yytext());
if(c==2)closeRelation("");
          }
        case 52: break;
        case 2: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 53: break;
        case 23: 
          { handleVar(yytext());
          }
        case 54: break;
        case 34: 
          { hasAggregate = true; state = AGGREGATE; closeWhereClauses();
        yybegin(AGGREGATE);
          }
        case 55: break;
        case 27: 
          { state = WHERE;  yybegin(WHERE);
          }
        case 56: break;
        case 29: 
          { hasFilter = true; state = FILTER; closeWhereClauses();
        yybegin(FILTER);
          }
        case 57: break;
        case 24: 
          { if(rhs)
        handleVar(yytext());
    else {
        clause.add(yytext());
        aggregateVars.add(yytext());
    }
          }
        case 58: break;
        case 28: 
          { yybegin(SELECT);
          }
        case 59: break;
        case 3: 
          { if (interval == true)yybegin(INTERVAL); else yybegin(state);
          }
        case 60: break;
        case 26: 
          { clause.add(yytext());
          }
        case 61: break;
        case 10: 
          { yybegin(STRING);
          }
        case 62: break;
        case 15: 
          { this.clause.add(yytext()); rhs= true;
          }
        case 63: break;
        case 18: 
          { throw new QueryParseException();
          }
        case 64: break;
        case 31: 
          { c++;
                            clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
                            string.setLength(0);if(c==2)if(isRelation)closeRelation("");
          }
        case 65: break;
        case 6: 
          { projectedVars.add("*");
          }
        case 66: break;
        case 35: 
          { clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
                           string.setLength(0);
          }
        case 67: break;
        case 7: 
          { throw new QueryParseException("Invalid WHERE statement " + yytext());
          }
        case 68: break;
        case 16: 
          { throw new QueryParseException("Invalid AGGREGATE statement " + yytext());
          }
        case 69: break;
        case 4: 
          { throw new QueryParseException("Invalid select statement " + yytext());
          }
        case 70: break;
        case 1: 
          { string.append( yytext() );
          }
        case 71: break;
        case 21: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 72: break;
        case 17: 
          { this.aggregateClauses.add(clause);
      clause = new ArrayList<>();
      rhs = false;
          }
        case 73: break;
        case 5: 
          { 
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
