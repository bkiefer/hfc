/* The following code was generated by JFlex 1.7.0 */

package de.dfki.lt.hfc.io;

import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>QueryFlexParser.flex</tt>
 */
public class QueryFlexParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SELECT = 4;
  public static final int WHERE = 6;
  public static final int FILTER = 8;
  public static final int AGGREGATE = 10;
  public static final int INTERVAL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\3\1\4\1\1\22\0\1\5\1\67\1\57"+
    "\1\11\2\0\1\66\1\60\1\52\1\53\1\65\1\0\1\64\3\0"+
    "\4\61\4\14\2\0\1\7\1\0\1\6\1\70\1\10\1\15\1\0"+
    "\1\31\1\54\1\26\1\35\1\24\1\47\1\51\1\44\1\36\2\0"+
    "\1\25\1\55\1\37\1\56\2\0\1\45\1\23\1\27\2\0\1\43"+
    "\3\0\1\52\1\13\1\53\1\62\1\12\1\0\1\30\1\60\1\21"+
    "\1\32\1\17\1\46\1\50\1\41\1\33\2\0\1\20\1\0\1\34"+
    "\3\0\1\42\1\16\1\22\1\60\1\0\1\40\1\63\14\0\1\3"+
    "\u1fa2\0\1\3\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\0\1\3\1\4\1\5\5\4"+
    "\1\6\4\7\1\10\4\7\1\10\1\11\1\7\1\12"+
    "\1\7\1\13\6\14\1\12\1\14\1\15\1\14\3\16"+
    "\1\17\2\20\1\21\1\22\1\20\3\0\1\23\3\1"+
    "\1\24\6\0\1\25\1\10\3\0\1\10\2\0\5\14"+
    "\1\5\1\16\1\26\1\27\16\0\3\14\1\30\1\14"+
    "\1\16\17\0\5\14\1\16\7\0\1\31\1\14\6\0"+
    "\1\30\4\14\1\30\2\0\3\32\4\0\1\33\2\0"+
    "\4\14\10\0\1\34\2\14\1\34\1\35\3\0\1\36"+
    "\2\0\2\14\1\0\1\37\1\40\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u0273\0\u0273\0\u0273"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0273\0\u0273\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0273\0\u0603\0\u0273\0\u063c\0\u0273\0\u0675\0\u06ae\0\u0474"+
    "\0\u06e7\0\u0720\0\u0759\0\u0675\0\u0792\0\u0675\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u0804\0\u0273\0\u08af\0\u0273\0\u0273\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u0273\0\u0273\0\u09cc\0\u0a05\0\u02e5"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0675\0\u0474\0\u0273"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0675\0\u0d95\0\u0876\0\u08af\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u0675\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u0273"+
    "\0\u13d1\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u1560"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u167d\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u0273\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1c80\0\u1f9e\0\u1fd7"+
    "\0\u1d64\0\u1dd6\0\u2010\0\u2049\0\u2082\0\u0273\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u0273\0\u0273\0\u0675\0\u219f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\0\1\10\4\0\1\11\45\0\1\12\1\13\1\14"+
    "\10\12\1\15\43\12\1\16\11\12\1\17\3\0\2\20"+
    "\7\17\1\21\14\17\1\22\2\17\1\23\2\17\1\24"+
    "\2\17\1\25\21\17\1\26\3\17\1\27\3\0\2\20"+
    "\1\30\3\27\1\31\2\27\1\32\5\27\1\33\1\34"+
    "\3\27\1\35\1\36\3\27\1\33\10\27\1\37\1\40"+
    "\2\27\1\41\1\27\1\42\2\33\1\43\2\27\1\44"+
    "\3\27\1\45\2\27\1\46\2\0\1\46\2\20\1\47"+
    "\6\46\1\50\12\46\1\51\1\52\5\46\1\53\17\46"+
    "\1\54\2\46\1\55\3\46\1\56\1\57\1\46\1\60"+
    "\2\0\1\60\2\20\1\61\6\60\1\62\50\60\1\63"+
    "\2\60\1\64\3\0\2\20\7\64\1\65\35\64\1\66"+
    "\3\64\1\67\2\64\1\70\1\64\1\20\4\64\17\0"+
    "\1\71\70\0\1\72\4\0\1\73\44\0\1\12\2\0"+
    "\10\12\1\0\43\12\1\0\11\12\2\0\1\14\157\0"+
    "\1\74\4\0\6\74\1\75\1\76\5\74\1\75\11\74"+
    "\1\75\5\74\1\75\3\74\1\75\10\74\2\75\1\77"+
    "\7\74\1\100\2\0\1\100\2\0\63\100\33\0\1\101"+
    "\70\0\1\101\2\0\1\102\73\0\1\103\70\0\1\103"+
    "\2\0\1\104\24\0\1\105\2\0\1\105\2\0\63\105"+
    "\7\0\1\106\61\0\1\107\2\0\1\107\2\0\63\107"+
    "\33\0\1\110\66\0\1\110\107\0\1\111\66\0\1\110"+
    "\1\0\1\111\1\112\52\0\1\113\70\0\1\114\2\0"+
    "\1\115\100\0\1\110\104\0\1\116\6\0\1\46\2\0"+
    "\1\46\2\0\63\46\1\117\2\0\1\117\2\0\63\117"+
    "\1\46\2\0\1\46\2\0\42\46\1\120\21\46\2\0"+
    "\1\46\2\0\42\46\1\120\1\121\20\46\2\0\1\46"+
    "\2\0\50\46\1\122\13\46\2\0\1\46\2\0\54\46"+
    "\1\123\7\46\2\0\1\46\2\0\62\46\1\124\1\60"+
    "\2\0\1\60\2\0\63\60\1\125\2\0\1\125\2\0"+
    "\63\125\1\126\2\0\1\126\2\0\63\126\1\127\2\0"+
    "\1\127\2\0\63\127\62\0\1\130\26\0\1\131\70\0"+
    "\1\132\75\0\1\133\57\0\1\75\44\0\1\75\23\0"+
    "\1\76\44\0\1\76\25\0\1\134\75\0\1\135\64\0"+
    "\1\136\75\0\1\137\44\0\1\105\2\0\1\105\2\0"+
    "\1\105\1\140\1\105\1\140\57\105\50\0\1\141\71\0"+
    "\1\142\37\0\1\143\75\0\1\144\51\0\1\145\62\0"+
    "\1\117\2\0\1\117\2\0\1\117\1\146\1\117\1\146"+
    "\57\117\1\46\2\0\1\46\2\0\42\46\1\147\21\46"+
    "\2\0\1\46\2\0\43\46\1\150\20\46\2\0\1\46"+
    "\2\0\21\46\1\151\42\46\2\0\1\46\2\0\1\152"+
    "\62\46\1\125\2\0\1\125\2\0\1\125\1\153\1\125"+
    "\1\153\57\125\6\0\1\154\101\0\1\155\70\0\1\156"+
    "\75\0\1\157\66\0\1\160\75\0\1\161\103\0\1\162"+
    "\73\0\1\163\23\0\1\164\2\0\1\164\2\0\63\164"+
    "\42\0\1\165\73\0\1\166\45\0\1\167\75\0\1\170"+
    "\41\0\1\171\2\0\1\171\2\0\55\171\1\172\5\171"+
    "\1\173\2\0\1\173\2\0\63\173\1\46\2\0\1\46"+
    "\2\0\34\46\1\174\27\46\2\0\1\46\2\0\37\46"+
    "\1\175\23\46\1\176\2\0\1\176\2\0\55\176\1\177"+
    "\5\176\1\200\2\0\1\200\2\0\63\200\1\201\2\0"+
    "\1\201\2\0\55\201\1\202\5\201\21\0\1\203\70\0"+
    "\1\204\75\0\1\205\75\0\1\206\73\0\1\207\51\0"+
    "\1\210\75\0\1\210\44\0\1\164\2\0\1\164\2\0"+
    "\2\164\1\211\60\164\17\0\1\212\75\0\1\213\63\0"+
    "\1\214\75\0\1\215\44\0\1\171\2\0\1\171\2\0"+
    "\3\171\1\216\60\171\2\0\1\171\2\0\3\171\1\216"+
    "\4\171\1\217\52\171\1\173\2\0\1\173\2\0\2\173"+
    "\1\220\60\173\1\46\2\0\1\46\2\0\11\46\1\221"+
    "\52\46\2\0\1\46\2\0\16\46\1\222\44\46\1\176"+
    "\2\0\1\176\2\0\3\176\1\223\60\176\2\0\1\176"+
    "\2\0\3\176\1\223\4\176\1\224\52\176\1\200\2\0"+
    "\1\200\2\0\2\200\1\225\60\200\1\201\2\0\1\201"+
    "\2\0\3\201\1\226\60\201\2\0\1\201\2\0\3\201"+
    "\1\226\4\201\1\227\52\201\22\0\1\230\70\0\1\231"+
    "\75\0\1\232\75\0\1\233\73\0\1\234\101\0\1\235"+
    "\71\0\1\236\61\0\1\237\73\0\1\237\23\0\1\240"+
    "\2\0\1\240\2\0\63\240\1\171\2\0\1\171\2\0"+
    "\3\171\1\216\20\171\1\241\36\171\1\46\2\0\1\46"+
    "\2\0\42\46\1\242\21\46\2\0\1\46\2\0\43\46"+
    "\1\243\17\46\1\244\2\0\1\244\2\0\63\244\1\176"+
    "\2\0\1\176\2\0\3\176\1\223\20\176\1\245\36\176"+
    "\1\246\2\0\1\246\2\0\63\246\1\201\2\0\1\201"+
    "\2\0\3\201\1\226\20\201\1\247\36\201\30\0\1\250"+
    "\71\0\1\250\70\0\1\251\60\0\1\252\75\0\1\253"+
    "\72\0\1\254\71\0\1\255\37\0\1\240\2\0\1\240"+
    "\2\0\2\240\1\256\60\240\1\171\2\0\1\171\2\0"+
    "\1\171\1\216\1\171\1\216\57\171\1\46\2\0\1\46"+
    "\2\0\22\46\1\257\41\46\2\0\1\46\2\0\23\46"+
    "\1\260\37\46\1\244\2\0\1\244\2\0\2\244\1\261"+
    "\60\244\1\176\2\0\1\176\2\0\1\176\1\223\1\176"+
    "\1\223\57\176\1\246\2\0\1\246\2\0\2\246\1\262"+
    "\60\246\1\201\2\0\1\201\2\0\1\201\1\263\1\201"+
    "\1\226\57\201\20\0\1\264\75\0\1\265\65\0\1\266"+
    "\75\0\1\266\63\0\1\267\75\0\1\270\41\0\1\46"+
    "\2\0\1\46\2\0\14\46\1\271\47\46\2\0\1\46"+
    "\2\0\21\46\1\272\41\46\1\273\2\0\1\273\2\0"+
    "\63\273\20\0\1\274\75\0\1\274\62\0\1\275\75\0"+
    "\1\275\44\0\1\46\2\0\1\46\2\0\11\46\1\276"+
    "\52\46\2\0\1\46\2\0\16\46\1\276\44\46\1\273"+
    "\2\0\1\273\2\0\2\273\1\277\60\273";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\1\1\11\1\0\3\11\5\1\2\11\11\1"+
    "\1\11\1\1\1\11\1\1\1\11\16\1\1\11\1\1"+
    "\2\11\1\1\3\0\2\11\3\1\6\0\1\1\1\11"+
    "\3\0\1\1\2\0\11\1\16\0\6\1\17\0\6\1"+
    "\7\0\1\11\1\1\6\0\6\1\2\0\3\1\4\0"+
    "\1\11\2\0\4\1\10\0\5\1\3\0\1\11\2\0"+
    "\2\1\1\0\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   private static final Logger logger = LoggerFactory.getLogger(QueryParser.class);
   private StringBuffer string = new StringBuffer();
   public HashSet<String> projectedVars = new LinkedHashSet<String>();
   public ArrayList<ArrayList<String>> whereClauses = new ArrayList<ArrayList<String>>();
   public ArrayList<ArrayList<String>> filterClauses = new ArrayList<ArrayList<String>>();
   public ArrayList<ArrayList<String>> aggregateClauses = new ArrayList<ArrayList<String>>();
   public HashSet<String> aggregateVars = new HashSet<>();
   public HashSet<String> foundVars = new HashSet<String>();
   private boolean distinct = false;
   private boolean expandProxy = false;
   public boolean hasAggregate = false;
   public boolean hasFilter = false;
   private ArrayList<String> clause = new ArrayList<>();
   private int state;
   private boolean rhs = false;
   private boolean interval = false;
   private String start;
   private int c = 0;
   private boolean isRelation = false;

   public boolean isDistinct(){
     return this.distinct;
   }

   public boolean isExpandProxy(){
     return this.expandProxy;
   }

   private void handleVar(String var) throws QueryParseException {
     if(this.state == FILTER){
       logger.debug(" foundVars: {}  Var: {} ", foundVars, var);
       if(!this.foundVars.contains(var))
         throw new QueryParseException("unknown variable " + var + " used in FILTER");
     }
     //add to clause
     this.clause.add(var);
     //add to foundVars
     this.foundVars.add(var);
   }

   private void closeWhereClauses() throws QueryParseException {
     this.whereClauses.add(clause);
     if (whereClauses.isEmpty())
       throw new QueryParseException("Missing where clauses");
       if (projectedVars.contains("*")) {
         // a "*" should not come up with further vars
         if (projectedVars.size() > 1)
           throw new QueryParseException("\"*\" and further variables can not be mixed");
       }
       else {
         // projected vars should only consist of found vars
         HashSet<String> pv = new HashSet<String>(projectedVars);
         pv.removeAll(foundVars);
         if (! pv.isEmpty())
           throw new QueryParseException("SELECT contains variables not found in WHERE: " + pv);
       }
       clause = new ArrayList<>();
   }

   private void closeFilterClauses(){
     this.filterClauses.add(clause);
     clause = new ArrayList<>();
   }

   private void closeAggregateClauses(){
     this.aggregateClauses.add(clause);
     clause = new ArrayList<>();
   }

   private void handleEOF() throws QueryParseException {
     switch (state){
     case(WHERE):
       closeWhereClauses();
       break;
     case (FILTER):
       closeFilterClauses();
       break;
     case (AGGREGATE):
       closeAggregateClauses();
       break;
     default:
       throw new QueryParseException("Invalid query");
     }
   }

   public void parse() throws IOException, QueryParseException{
     while ( !zzAtEOF ){
       yylex();
     }
   }

   private String handleUnicode(String match){
     Pattern p = Pattern.compile("\\\\u(\\p{XDigit}{4})");
     Matcher m = p.matcher(match);
     StringBuffer buf = new StringBuffer(match.length());
     while (m.find()) {
       String ch = String.valueOf((char) Integer.parseInt(m.group(1), 16));
       m.appendReplacement(buf, Matcher.quoteReplacement(ch));
     }
     m.appendTail(buf);
     return buf.toString();
   }

   private void closeRelation(String end){
     c = 0;
     interval = false;
     isRelation = false;
     this.clause.add(start + end);
     yybegin(state);
   }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QueryFlexParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws     QueryParseException
 {
    if (!zzEOFDone) {
      zzEOFDone = true;
        handleEOF();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException,   QueryParseException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { string.append( yytext() );
            } 
            // fall through
          case 35: break;
          case 2: 
            { throw new RuntimeException("Unterminated string at end of line");
            } 
            // fall through
          case 36: break;
          case 3: 
            { if (interval == true)yybegin(INTERVAL); else yybegin(state);
            } 
            // fall through
          case 37: break;
          case 4: 
            { throw new QueryParseException("Invalid select statement " + yytext());
            } 
            // fall through
          case 38: break;
          case 5: 
            { 
            } 
            // fall through
          case 39: break;
          case 6: 
            { projectedVars.add("*");
            } 
            // fall through
          case 40: break;
          case 7: 
            { throw new QueryParseException("Invalid WHERE statement " + yytext());
            } 
            // fall through
          case 41: break;
          case 8: 
            { isRelation = true;
  start = yytext();
  state = WHERE;
  yybegin(INTERVAL);
            } 
            // fall through
          case 42: break;
          case 9: 
            { start = yytext(); state = WHERE; yybegin(INTERVAL);
            } 
            // fall through
          case 43: break;
          case 10: 
            { yybegin(STRING);
            } 
            // fall through
          case 44: break;
          case 11: 
            { this.whereClauses.add(clause);
  clause = new ArrayList<>();
            } 
            // fall through
          case 45: break;
          case 12: 
            { this.clause.add(yytext());
            } 
            // fall through
          case 46: break;
          case 13: 
            { this.filterClauses.add(clause);
   clause = new ArrayList<>();
            } 
            // fall through
          case 47: break;
          case 14: 
            { this.clause.add(yytext()); rhs= true;
            } 
            // fall through
          case 48: break;
          case 15: 
            { this.aggregateClauses.add(clause);
  clause = new ArrayList<>();
  rhs = false;
            } 
            // fall through
          case 49: break;
          case 16: 
            { throw new QueryParseException();
            } 
            // fall through
          case 50: break;
          case 17: 
            { closeRelation( yytext());
            } 
            // fall through
          case 51: break;
          case 18: 
            { interval = true; yybegin(STRING);
            } 
            // fall through
          case 52: break;
          case 19: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 53: break;
          case 20: 
            { this.projectedVars.add(yytext());
            } 
            // fall through
          case 54: break;
          case 21: 
            { handleVar(yytext());
            } 
            // fall through
          case 55: break;
          case 22: 
            { if(rhs)
        handleVar(yytext());
    else {
        clause.add(yytext());
        aggregateVars.add(yytext());
    }
            } 
            // fall through
          case 56: break;
          case 23: 
            { c++; handleVar(yytext());
  if (c==2) closeRelation("");
            } 
            // fall through
          case 57: break;
          case 24: 
            { clause.add(yytext());
            } 
            // fall through
          case 58: break;
          case 25: 
            { state = WHERE;  yybegin(WHERE);
            } 
            // fall through
          case 59: break;
          case 26: 
            { yybegin(SELECT);
            } 
            // fall through
          case 60: break;
          case 27: 
            { hasFilter = true; state = FILTER; closeWhereClauses();
        yybegin(FILTER);
            } 
            // fall through
          case 61: break;
          case 28: 
            { clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
  string.setLength(0);
            } 
            // fall through
          case 62: break;
          case 29: 
            { c++;
  clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
  string.setLength(0);
  if(c==2)if(isRelation)closeRelation("");
            } 
            // fall through
          case 63: break;
          case 30: 
            { distinct = true;
            } 
            // fall through
          case 64: break;
          case 31: 
            { this.expandProxy = true;
            yybegin(SELECT);
            } 
            // fall through
          case 65: break;
          case 32: 
            { hasAggregate = true; state = AGGREGATE; closeWhereClauses();
  yybegin(AGGREGATE);
            } 
            // fall through
          case 66: break;
          case 33: 
            { hasAggregate = true;  state = AGGREGATE; closeFilterClauses();
                     yybegin(AGGREGATE);
            } 
            // fall through
          case 67: break;
          case 34: 
            { c++;
  clause.add("\""+handleUnicode(string.toString())+"\"" + yytext());
  string.setLength(0);if(c==2)if(isRelation)closeRelation("");
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
