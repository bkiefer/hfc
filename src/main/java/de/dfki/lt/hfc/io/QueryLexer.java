/* The following code was generated by JFlex 1.7.0 */

package de.dfki.lt.hfc.io;

import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import de.dfki.lt.hfc.types.XsdString;
import de.dfki.lt.hfc.io.QueryParser.Position;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>QueryLexer.flex</tt>
 */
class QueryLexer implements QueryParser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\64\1\6\1\2\1\3\1\4\1\1\16\64\4\0\1\6\1\65"+
    "\1\70\1\12\1\63\1\0\1\67\1\76\1\17\1\20\1\67\1\0"+
    "\1\67\3\0\4\77\4\15\2\64\1\10\1\0\1\7\1\66\1\11"+
    "\1\16\1\73\1\27\1\25\1\44\1\24\1\31\1\23\1\61\1\56"+
    "\1\50\1\63\1\36\1\43\1\30\1\51\1\32\2\63\1\57\1\21"+
    "\1\45\2\63\1\55\3\63\1\17\1\14\1\20\1\71\1\13\1\0"+
    "\1\33\1\75\1\41\1\46\1\37\1\26\1\60\1\53\1\22\1\74"+
    "\1\35\1\40\1\74\1\47\1\62\2\74\1\54\1\34\1\42\1\75"+
    "\1\74\1\52\1\72\2\74\4\0\6\64\1\5\32\64\2\0\4\63"+
    "\4\0\1\63\2\0\1\64\7\0\1\63\4\0\1\63\5\0\27\63"+
    "\1\0\37\63\1\0\u01ca\63\4\0\14\63\16\0\5\63\7\0\1\63"+
    "\1\0\1\63\21\0\160\64\5\63\1\0\2\63\2\0\4\63\1\0"+
    "\1\63\6\0\1\63\1\0\3\63\1\0\1\63\1\0\24\63\1\0"+
    "\123\63\1\0\213\63\1\0\5\64\2\0\246\63\1\0\46\63\2\0"+
    "\1\63\6\0\51\63\6\0\1\63\1\0\55\64\1\0\1\64\1\0"+
    "\2\64\1\0\2\64\1\0\1\64\10\0\33\63\4\0\4\63\15\0"+
    "\6\64\5\0\1\63\4\0\13\64\1\0\1\64\3\0\53\63\37\64"+
    "\4\0\2\63\1\64\143\63\1\0\1\63\10\64\1\0\6\64\2\63"+
    "\2\64\1\0\4\64\2\63\12\64\3\63\2\0\1\63\17\0\1\64"+
    "\1\63\1\64\36\63\33\64\2\0\131\63\13\64\1\63\16\0\12\64"+
    "\41\63\11\64\2\63\4\0\1\63\2\0\1\64\30\63\4\64\1\63"+
    "\11\64\1\63\3\64\1\63\5\64\22\0\31\63\3\64\4\0\13\63"+
    "\65\0\25\63\1\0\22\63\13\0\61\64\66\63\3\64\1\63\22\64"+
    "\1\63\7\64\12\63\2\64\2\0\12\64\1\0\20\63\3\64\1\0"+
    "\10\63\2\0\2\63\2\0\26\63\1\0\7\63\1\0\1\63\3\0"+
    "\4\63\2\0\1\64\1\63\7\64\2\0\2\64\2\0\3\64\1\63"+
    "\10\0\1\64\4\0\2\63\1\0\3\63\2\64\2\0\12\64\4\63"+
    "\7\0\2\63\1\0\1\64\2\0\3\64\1\0\6\63\4\0\2\63"+
    "\2\0\26\63\1\0\7\63\1\0\2\63\1\0\2\63\1\0\2\63"+
    "\2\0\1\64\1\0\5\64\4\0\2\64\2\0\3\64\3\0\1\64"+
    "\7\0\4\63\1\0\1\63\7\0\14\64\3\63\1\64\13\0\3\64"+
    "\1\0\11\63\1\0\3\63\1\0\26\63\1\0\7\63\1\0\2\63"+
    "\1\0\5\63\2\0\1\64\1\63\10\64\1\0\3\64\1\0\3\64"+
    "\2\0\1\63\17\0\2\63\2\64\2\0\12\64\1\0\1\63\7\0"+
    "\1\63\6\64\1\0\3\64\1\0\10\63\2\0\2\63\2\0\26\63"+
    "\1\0\7\63\1\0\2\63\1\0\5\63\2\0\1\64\1\63\7\64"+
    "\2\0\2\64\2\0\3\64\7\0\3\64\4\0\2\63\1\0\3\63"+
    "\2\64\2\0\12\64\1\0\1\63\20\0\1\64\1\63\1\0\6\63"+
    "\3\0\3\63\1\0\4\63\3\0\2\63\1\0\1\63\1\0\2\63"+
    "\3\0\2\63\3\0\3\63\3\0\14\63\4\0\5\64\3\0\3\64"+
    "\1\0\4\64\2\0\1\63\6\0\1\64\16\0\12\64\11\0\1\63"+
    "\6\0\5\64\10\63\1\0\3\63\1\0\27\63\1\0\20\63\3\0"+
    "\1\63\7\64\1\0\3\64\1\0\4\64\7\0\2\64\1\0\3\63"+
    "\5\0\2\63\2\64\2\0\12\64\20\0\1\63\3\64\1\0\10\63"+
    "\1\0\3\63\1\0\27\63\1\0\12\63\1\0\5\63\2\0\1\64"+
    "\1\63\7\64\1\0\3\64\1\0\4\64\7\0\2\64\7\0\1\63"+
    "\1\0\2\63\2\64\2\0\12\64\1\0\2\63\15\0\4\64\11\63"+
    "\1\0\3\63\1\0\51\63\2\64\1\63\7\64\1\0\3\64\1\0"+
    "\4\64\1\63\5\0\3\63\1\64\7\0\3\63\2\64\2\0\12\64"+
    "\12\0\6\63\1\0\3\64\1\0\22\63\3\0\30\63\1\0\11\63"+
    "\1\0\1\63\2\0\7\63\3\0\1\64\4\0\6\64\1\0\1\64"+
    "\1\0\10\64\6\0\12\64\2\0\2\64\15\0\60\63\1\64\2\63"+
    "\7\64\4\0\10\63\10\64\1\0\12\64\47\0\2\63\1\0\1\63"+
    "\1\0\5\63\1\0\30\63\1\0\1\63\1\0\12\63\1\64\2\63"+
    "\11\64\1\63\2\0\5\63\1\0\1\63\1\0\6\64\2\0\12\64"+
    "\2\0\4\63\40\0\1\63\27\0\2\64\6\0\12\64\13\0\1\64"+
    "\1\0\1\64\1\0\1\64\4\0\2\64\10\63\1\0\44\63\4\0"+
    "\24\64\1\0\2\64\5\63\13\64\1\0\44\64\11\0\1\64\71\0"+
    "\53\63\24\64\1\63\12\64\6\0\6\63\4\64\4\63\3\64\1\63"+
    "\3\64\2\63\7\64\3\63\4\64\15\63\14\64\1\63\17\64\2\0"+
    "\46\63\1\0\1\63\5\0\1\63\2\0\53\63\1\0\u014d\63\1\0"+
    "\4\63\2\0\7\63\1\0\1\63\1\0\4\63\2\0\51\63\1\0"+
    "\4\63\2\0\41\63\1\0\4\63\2\0\7\63\1\0\1\63\1\0"+
    "\4\63\2\0\17\63\1\0\71\63\1\0\4\63\2\0\103\63\2\0"+
    "\3\64\40\0\20\63\20\0\126\63\2\0\6\63\3\0\u026c\63\2\0"+
    "\21\63\1\0\32\63\5\0\113\63\3\0\13\63\7\0\15\63\1\0"+
    "\4\63\3\64\13\0\22\63\3\64\13\0\22\63\2\64\14\0\15\63"+
    "\1\0\3\63\1\0\2\64\14\0\64\63\40\64\3\0\1\63\3\0"+
    "\2\63\1\64\2\0\12\64\41\0\4\64\1\0\12\64\6\0\131\63"+
    "\7\0\5\63\2\64\42\63\1\64\1\63\5\0\106\63\12\0\37\63"+
    "\1\0\14\64\4\0\14\64\12\0\12\64\36\63\2\0\5\63\13\0"+
    "\54\63\4\0\32\63\6\0\12\64\46\0\27\63\5\64\4\0\65\63"+
    "\12\64\1\0\35\64\2\0\13\64\6\0\12\64\15\0\1\63\10\0"+
    "\16\64\1\0\2\64\77\0\5\64\57\63\21\64\7\63\4\0\12\64"+
    "\21\0\11\64\14\0\3\64\36\63\15\64\2\63\12\64\54\63\16\64"+
    "\14\0\44\63\24\64\10\0\12\64\3\0\3\63\12\64\44\63\2\0"+
    "\11\63\7\0\53\63\2\0\3\63\20\0\3\64\1\0\25\64\4\63"+
    "\1\64\6\63\1\64\2\63\3\64\1\63\5\0\300\63\72\64\1\0"+
    "\5\64\u0116\63\2\0\6\63\2\0\46\63\2\0\6\63\2\0\10\63"+
    "\1\0\1\63\1\0\1\63\1\0\1\63\1\0\37\63\2\0\65\63"+
    "\1\0\7\63\1\0\1\63\3\0\3\63\1\0\7\63\3\0\4\63"+
    "\2\0\6\63\4\0\15\63\5\0\3\63\1\0\7\63\16\0\5\64"+
    "\30\0\1\3\1\3\5\64\20\0\2\63\23\0\1\63\13\0\5\64"+
    "\1\0\12\64\1\0\1\63\15\0\1\63\20\0\15\63\3\0\40\63"+
    "\20\0\15\64\4\0\1\64\3\0\14\64\21\0\1\63\4\0\1\63"+
    "\2\0\12\63\1\0\1\63\3\0\5\63\6\0\1\63\1\0\1\63"+
    "\1\0\1\63\1\0\4\63\1\0\13\63\2\0\4\63\5\0\5\63"+
    "\4\0\1\63\21\0\51\63\u0a77\0\57\63\1\0\57\63\1\0\205\63"+
    "\6\0\4\63\3\64\2\63\14\0\46\63\1\0\1\63\5\0\1\63"+
    "\2\0\70\63\7\0\1\63\17\0\1\64\27\63\11\0\7\63\1\0"+
    "\7\63\1\0\7\63\1\0\7\63\1\0\7\63\1\0\7\63\1\0"+
    "\7\63\1\0\7\63\1\0\40\64\57\0\1\63\u01d5\0\3\63\31\0"+
    "\11\63\6\64\1\0\5\63\2\0\5\63\4\0\126\63\2\0\2\64"+
    "\2\0\3\63\1\0\132\63\1\0\4\63\5\0\53\63\1\0\136\63"+
    "\21\0\40\63\60\0\20\63\u0200\0\u19c0\63\100\0\u51fd\63\3\0\u048d\63"+
    "\103\0\56\63\2\0\u010d\63\3\0\20\63\12\64\2\63\24\0\57\63"+
    "\1\64\4\0\12\64\1\0\37\63\2\64\120\63\2\64\45\0\11\63"+
    "\2\0\147\63\2\0\65\63\2\0\11\63\52\0\15\63\1\64\3\63"+
    "\1\64\4\63\1\64\27\63\5\64\4\0\1\64\13\0\1\63\7\0"+
    "\64\63\14\0\2\64\62\63\22\64\12\0\12\64\6\0\22\64\6\63"+
    "\3\0\1\63\1\0\2\63\13\64\34\63\10\64\2\0\27\63\15\64"+
    "\14\0\35\63\3\0\4\64\57\63\16\64\16\0\1\63\12\64\6\0"+
    "\5\63\1\64\12\63\12\64\5\63\1\0\51\63\16\64\11\0\3\63"+
    "\1\64\10\63\2\64\2\0\12\64\6\0\27\63\3\0\1\63\3\64"+
    "\62\63\1\64\1\63\3\64\2\63\2\64\5\63\2\64\1\63\1\64"+
    "\1\63\30\0\3\63\2\0\13\63\5\64\2\0\3\63\2\64\12\0"+
    "\6\63\2\0\6\63\2\0\6\63\11\0\7\63\1\0\7\63\1\0"+
    "\53\63\1\0\16\63\6\0\163\63\10\64\1\0\2\64\2\0\12\64"+
    "\6\0\u2ba4\63\14\0\27\63\4\0\61\63\u2104\0\u016e\63\2\0\152\63"+
    "\46\0\7\63\14\0\5\63\5\0\1\63\1\64\12\63\1\0\15\63"+
    "\1\0\5\63\1\0\1\63\1\0\2\63\1\0\2\63\1\0\154\63"+
    "\41\0\u016b\63\22\0\100\63\2\0\66\63\50\0\15\63\3\0\20\64"+
    "\20\0\20\64\3\0\2\63\30\0\3\63\31\0\1\63\6\0\5\63"+
    "\1\0\207\63\2\0\1\64\4\0\1\63\13\0\12\64\7\0\32\63"+
    "\4\0\1\63\1\0\32\63\13\0\131\63\3\0\6\63\2\0\6\63"+
    "\2\0\6\63\2\0\3\63\3\0\2\63\3\0\2\63\22\0\3\64"+
    "\4\0\14\63\1\0\32\63\1\0\23\63\1\0\2\63\1\0\17\63"+
    "\2\0\16\63\42\0\173\63\105\0\65\63\210\0\1\64\202\0\35\63"+
    "\3\0\61\63\17\0\1\64\37\0\40\63\15\0\36\63\5\0\46\63"+
    "\5\64\5\0\36\63\2\0\44\63\4\0\10\63\1\0\5\63\52\0"+
    "\236\63\2\0\12\64\6\0\44\63\4\0\44\63\4\0\50\63\10\0"+
    "\64\63\234\0\u0137\63\11\0\26\63\12\0\10\63\230\0\6\63\2\0"+
    "\1\63\1\0\54\63\1\0\2\63\3\0\1\63\2\0\27\63\12\0"+
    "\27\63\11\0\37\63\101\0\23\63\1\0\2\63\12\0\26\63\12\0"+
    "\32\63\106\0\70\63\6\0\2\63\100\0\1\63\3\64\1\0\2\64"+
    "\5\0\4\64\4\63\1\0\3\63\1\0\35\63\2\0\3\64\4\0"+
    "\1\64\40\0\35\63\3\0\35\63\43\0\10\63\1\0\34\63\2\64"+
    "\31\0\66\63\12\0\26\63\12\0\23\63\15\0\22\63\156\0\111\63"+
    "\67\0\63\63\15\0\63\63\15\0\44\63\4\64\10\0\12\64\u0146\0"+
    "\52\63\1\0\2\64\3\0\2\63\116\0\35\63\12\0\1\63\10\0"+
    "\26\63\13\64\137\0\25\63\33\0\27\63\11\0\3\64\65\63\17\64"+
    "\37\0\12\64\17\0\4\64\55\63\13\64\2\0\1\64\17\0\1\64"+
    "\2\0\31\63\7\0\12\64\6\0\3\64\44\63\16\64\1\0\12\64"+
    "\4\0\1\63\2\64\1\63\10\0\43\63\1\64\2\0\1\63\11\0"+
    "\3\64\60\63\16\64\4\63\4\0\4\64\1\0\14\64\1\63\1\0"+
    "\1\63\43\0\22\63\1\0\31\63\14\64\6\0\1\64\101\0\7\63"+
    "\1\0\1\63\1\0\4\63\1\0\17\63\1\0\12\63\7\0\57\63"+
    "\14\64\5\0\12\64\6\0\4\64\1\0\10\63\2\0\2\63\2\0"+
    "\26\63\1\0\7\63\1\0\2\63\1\0\5\63\1\0\2\64\1\63"+
    "\7\64\2\0\2\64\2\0\3\64\2\0\1\63\6\0\1\64\5\0"+
    "\5\63\2\64\2\0\7\64\3\0\5\64\213\0\65\63\22\64\4\63"+
    "\5\0\12\64\4\0\1\64\3\63\36\0\60\63\24\64\2\63\1\0"+
    "\1\63\10\0\12\64\246\0\57\63\7\64\2\0\11\64\27\0\4\63"+
    "\2\64\42\0\60\63\21\64\3\0\1\63\13\0\12\64\46\0\53\63"+
    "\15\64\1\63\7\0\12\64\66\0\33\63\2\0\17\64\4\0\12\64"+
    "\306\0\54\63\17\64\145\0\100\63\12\64\25\0\10\63\2\0\1\63"+
    "\2\0\10\63\1\0\2\63\1\0\30\63\6\64\1\0\2\64\2\0"+
    "\4\64\1\63\1\64\1\63\2\64\14\0\12\64\106\0\10\63\2\0"+
    "\47\63\7\64\2\0\7\64\1\63\1\0\1\63\1\64\33\0\1\63"+
    "\12\64\50\63\7\64\1\63\4\64\10\0\1\64\10\0\1\63\13\64"+
    "\56\63\20\64\3\0\1\63\42\0\71\63\u0107\0\11\63\1\0\45\63"+
    "\10\64\1\0\10\64\1\63\17\0\12\64\30\0\36\63\2\0\26\64"+
    "\1\0\16\64\111\0\7\63\1\0\2\63\1\0\46\63\6\64\3\0"+
    "\1\64\1\0\2\64\1\0\7\64\1\63\1\64\10\0\12\64\6\0"+
    "\6\63\1\0\2\63\1\0\40\63\5\64\1\0\2\64\1\0\5\64"+
    "\1\63\7\0\12\64\u0136\0\23\63\4\64\271\0\1\63\54\0\4\63"+
    "\37\0\u039a\63\146\0\157\63\21\0\304\63\u0abc\0\u042f\63\1\0\11\64"+
    "\u0fc7\0\u0247\63\u21b9\0\u0239\63\7\0\37\63\1\0\12\64\146\0\36\63"+
    "\2\0\5\64\13\0\60\63\7\64\11\0\4\63\14\0\12\64\11\0"+
    "\25\63\5\0\23\63\u02b0\0\100\63\200\0\113\63\4\0\1\64\1\63"+
    "\67\64\7\0\4\64\15\63\100\0\2\63\1\0\1\63\1\64\13\0"+
    "\2\64\16\0\u17f8\63\10\0\u04d6\63\52\0\11\63\u22f7\0\u011f\63\61\0"+
    "\3\63\21\0\4\63\10\0\u018c\63\u0904\0\153\63\5\0\15\63\3\0"+
    "\11\63\7\0\12\63\3\0\2\64\1\0\4\64\u14c1\0\5\64\3\0"+
    "\26\64\2\0\7\64\36\0\4\64\224\0\3\64\u01bb\0\125\63\1\0"+
    "\107\63\1\0\2\63\2\0\1\63\2\0\2\63\2\0\4\63\1\0"+
    "\14\63\1\0\1\63\1\0\7\63\1\0\101\63\1\0\4\63\2\0"+
    "\10\63\1\0\7\63\1\0\34\63\1\0\4\63\1\0\5\63\1\0"+
    "\1\63\3\0\7\63\1\0\u0154\63\2\0\31\63\1\0\31\63\1\0"+
    "\37\63\1\0\31\63\1\0\37\63\1\0\31\63\1\0\37\63\1\0"+
    "\31\63\1\0\37\63\1\0\31\63\1\0\10\63\2\0\62\64\u0200\0"+
    "\67\64\4\0\62\64\10\0\1\64\16\0\1\64\26\0\5\64\1\0"+
    "\17\64\u0550\0\7\64\1\0\21\64\2\0\7\64\1\0\2\64\1\0"+
    "\5\64\325\0\55\63\3\0\7\64\7\63\2\0\12\64\4\0\1\63"+
    "\u0171\0\54\63\16\64\5\0\1\63\u0500\0\305\63\13\0\7\64\51\0"+
    "\104\63\7\64\1\63\4\0\12\64\u0356\0\1\63\u014f\0\4\63\1\0"+
    "\33\63\1\0\2\63\1\0\1\63\2\0\1\63\1\0\12\63\1\0"+
    "\4\63\1\0\1\63\1\0\1\63\6\0\1\63\4\0\1\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\2\63\1\0\1\63\2\0"+
    "\1\63\1\0\1\63\1\0\1\63\1\0\1\63\1\0\1\63\1\0"+
    "\2\63\1\0\1\63\2\0\4\63\1\0\7\63\1\0\4\63\1\0"+
    "\4\63\1\0\1\63\1\0\12\63\1\0\21\63\5\0\3\63\1\0"+
    "\5\63\1\0\21\63\u0d34\0\12\64\u0406\0\ua6de\63\42\0\u1035\63\13\0"+
    "\336\63\2\0\u1682\63\16\0\u1d31\63\u0c1f\0\u021e\63\u05e2\0\u134b\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\64\36\0\140\64\200\0\360\64\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\2\1\3\1\1\1\4"+
    "\1\5\1\6\1\3\2\6\3\3\1\6\10\3\1\1"+
    "\2\7\1\10\1\11\2\12\1\11\1\1\1\13\2\0"+
    "\1\14\1\6\2\3\1\6\1\3\1\6\14\3\1\15"+
    "\1\16\1\17\3\11\3\0\1\20\6\3\1\21\3\3"+
    "\1\22\2\3\1\0\1\23\1\0\13\3\1\0\1\24"+
    "\11\3\1\25\2\0\2\26\1\27\4\3\1\26\2\0"+
    "\6\3\2\0\2\3\1\30\2\3\1\23\1\0\1\31"+
    "\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\200\0\200\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\200\0\200\0\u0640\0\u0680"+
    "\0\200\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0180\0\u0200"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0880\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0900\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\200\0\200\0\200\0\200\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u07c0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0200\0\u0e80\0\u0ec0\0\u0f00\0\u0200\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u0c80\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1000"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u0200\0\u1580\0\u15c0\0\u1600\0\u1640\0\u0200\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u0200\0\u1ac0\0\u1b00\0\u19c0\0\u1b40\0\u0200\0\u0200\0\u1b80"+
    "\0\u1b80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\0\1\4\1\0\1\4\1\5\2\3\1\6"+
    "\1\7\2\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\22\1\24"+
    "\1\25\11\14\1\26\1\27\1\14\1\30\1\31\2\14"+
    "\1\32\6\14\1\3\1\33\1\34\1\35\1\36\1\3"+
    "\1\14\1\3\2\14\2\3\1\37\1\40\1\41\7\37"+
    "\1\42\1\37\1\43\53\37\1\44\7\37\100\0\1\45"+
    "\2\0\1\45\1\0\1\45\1\0\71\45\1\6\5\0"+
    "\72\6\5\0\1\14\2\0\1\46\2\0\1\14\1\0"+
    "\1\14\3\0\44\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\1\47\2\0\1\47\1\0\1\47\1\0\71\47"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\1\14"+
    "\1\50\6\14\1\51\5\14\1\52\25\14\5\0\1\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\3\0\44\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\1\14\1\53\25\14\1\54\14\14\5\0\1\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\3\0\1\14\1\55\25\14\1\56\14\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\5\14\1\50\36\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\1\14\1\57\42\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\1\60\4\14\1\50"+
    "\5\14\1\61\23\14\1\62\1\63\3\14\5\0\1\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\3\0\1\14\1\50\42\14\5\0\1\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\3\0\6\14\1\50\35\14\5\0\1\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\3\0\13\14\1\61\23\14\1\62\4\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\16\14\1\64\25\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\1\14\1\65\42\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\41\14\1\66\2\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\11\14\1\67\32\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\32\14\1\70\11\14"+
    "\5\0\1\14\1\0\2\14\1\0\1\14\5\0\1\14"+
    "\5\0\1\14\1\0\1\14\3\0\32\14\1\70\2\14"+
    "\1\71\6\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\66\0\1\72\77\0\1\73\11\0\1\37\2\0\11\37"+
    "\1\0\53\37\1\0\7\37\2\0\1\41\75\0\1\42"+
    "\2\0\3\37\6\42\1\6\53\42\1\6\7\42\1\74"+
    "\5\0\6\74\1\75\1\76\10\74\1\75\13\74\1\75"+
    "\4\74\1\75\4\74\1\75\13\74\1\75\4\74\2\75"+
    "\1\77\71\0\1\100\1\0\1\101\4\0\1\45\2\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\102\1\45\1\102"+
    "\65\45\1\103\2\0\1\103\1\0\1\103\1\0\71\103"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\22\14"+
    "\1\104\21\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\17\14"+
    "\1\105\24\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\17\14"+
    "\1\106\24\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\22\14"+
    "\1\107\21\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\13\14"+
    "\1\110\30\14\5\0\1\14\1\0\2\14\1\0\1\14"+
    "\5\0\1\14\5\0\1\14\1\0\1\14\3\0\1\111"+
    "\43\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\15\14\1\112"+
    "\26\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\14\14\1\112"+
    "\27\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\37\14\1\113"+
    "\4\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\40\14\1\114"+
    "\3\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\17\14\1\115"+
    "\24\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\21\14\1\116"+
    "\22\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\24\14\1\116"+
    "\17\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\16\14\1\117"+
    "\25\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\10\14\1\120"+
    "\33\14\5\0\1\14\1\0\2\14\1\0\1\14\15\0"+
    "\1\75\61\0\1\75\15\0\1\76\61\0\1\76\71\0"+
    "\1\121\30\0\1\122\3\0\1\122\4\0\3\122\1\0"+
    "\4\122\3\0\2\122\2\0\3\122\3\0\1\122\1\0"+
    "\1\122\7\0\1\122\1\0\2\122\2\0\1\123\2\0"+
    "\1\123\1\0\1\123\1\0\71\123\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\10\14\1\124\33\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\16\14\1\125\25\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\21\14\1\126\22\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\24\14\1\127\17\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\21\14\1\130\22\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\24\14\1\131\17\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\33\14\1\132\10\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\36\14\1\133\5\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\16\14\1\134\25\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\33\14\1\135\10\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\36\14\1\136\5\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\7\0\1\137\70\0"+
    "\1\123\2\0\1\123\1\0\1\123\1\0\2\123\1\140"+
    "\66\123\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\23\14\1\141\20\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\20\14\1\142\23\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\16\14\1\143\25\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\10\14\1\144\33\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\1\14\1\145\42\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\27\14\1\146\14\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\16\14\1\147\25\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\10\14\1\150\33\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\20\14\1\151\23\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\16\14\1\152\25\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\1\14\1\0\1\14\3\0"+
    "\10\14\1\152\33\14\5\0\1\14\1\0\2\14\1\0"+
    "\1\14\1\153\2\0\1\153\1\0\1\153\1\0\63\153"+
    "\1\154\5\153\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\24\14\1\155\17\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\21\14\1\156\22\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\33\14\1\157\10\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\36\14\1\157\5\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\26\14\1\160\15\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\30\14\1\161\13\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\37\14\1\162\4\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\40\14\1\163\3\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\5\0\1\14\1\0\1\14"+
    "\3\0\21\14\1\164\22\14\5\0\1\14\1\0\2\14"+
    "\1\0\1\14\1\153\2\0\1\153\1\0\1\153\1\0"+
    "\3\153\1\165\66\153\2\0\1\153\1\0\1\153\1\0"+
    "\3\153\1\165\21\153\1\166\43\153\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\6\14\1\167\35\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\6\14\1\170\35\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\20\14\1\171\23\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\23\14\1\172\20\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\12\14\1\173\31\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\6\14\1\174\35\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\5\0\1\14\5\0"+
    "\1\14\1\0\1\14\3\0\12\14\1\170\31\14\5\0"+
    "\1\14\1\0\2\14\1\0\1\14\1\175\2\0\1\175"+
    "\1\0\1\175\1\0\71\175\1\153\2\0\1\153\1\0"+
    "\1\153\1\0\3\153\1\165\33\153\1\176\31\153\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\22\14\1\177"+
    "\21\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\17\14\1\200"+
    "\24\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\21\14\1\201"+
    "\22\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\24\14\1\201"+
    "\17\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\21\14\1\202"+
    "\22\14\5\0\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\5\0\1\14\1\0\1\14\3\0\24\14\1\203"+
    "\17\14\5\0\1\14\1\0\2\14\1\0\1\14\1\175"+
    "\2\0\1\175\1\0\1\175\1\0\2\175\1\204\66\175"+
    "\1\153\2\0\1\153\1\0\1\153\1\0\1\153\1\205"+
    "\1\153\1\165\65\153\5\0\1\14\5\0\1\14\1\0"+
    "\1\14\3\0\22\14\1\206\21\14\5\0\1\14\1\0"+
    "\2\14\1\0\1\14\5\0\1\14\5\0\1\14\1\0"+
    "\1\14\3\0\17\14\1\206\24\14\5\0\1\14\1\0"+
    "\2\14\1\0\1\14\5\0\1\14\5\0\1\14\1\0"+
    "\1\14\3\0\16\14\1\207\25\14\5\0\1\14\1\0"+
    "\2\14\1\0\1\14\5\0\1\14\5\0\1\14\1\0"+
    "\1\14\3\0\10\14\1\207\33\14\5\0\1\14\1\0"+
    "\2\14\1\0\1\14\1\210\2\0\1\210\1\0\1\210"+
    "\1\0\72\210\2\0\1\210\1\0\1\210\1\0\2\210"+
    "\1\211\66\210";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\2\11\22\1\2\11\2\1\1\11"+
    "\3\1\2\0\23\1\4\11\2\1\3\0\16\1\1\0"+
    "\1\1\1\0\13\1\1\0\13\1\2\0\10\1\2\0"+
    "\6\1\2\0\6\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private static final Logger logger = LoggerFactory.getLogger(QueryParser.class);

  private StringBuffer string = new StringBuffer();
  private Object yylval;

  private String handleUnicode(String match){
    Pattern p = Pattern.compile("\\\\u(\\p{XDigit}{4})");
    Matcher m = p.matcher(match);
    StringBuffer buf = new StringBuffer(match.length());
    while (m.find()) {
      String ch = String.valueOf((char) Integer.parseInt(m.group(1), 16));
      m.appendReplacement(buf, Matcher.quoteReplacement(ch));
    }
    m.appendTail(buf);
    return buf.toString();
  }

  /**
   * Method to retrieve the beginning position of the last scanned token.
   * @return the position at which the last scanned token starts.
   */
  public Position getStartPos() {
    return new Position(yyline, yycolumn, yychar);
  }

  /**
   * Method to retrieve the ending position of the last scanned token.
   * @return the first position beyond the last scanned token.
   */
  public Position getEndPos() {
    int len = yylength();
    return new Position(yyline, yycolumn + len, yychar + len);
  }

  /**
   * Method to retrieve the semantic value of the last scanned token.
   * @return the semantic value of the last scanned token.
   */
  public Object getLVal() {
    Object result = yylval;
    yylval = null;
    return result;
  }

  /**
   * Entry point for the scanner.  Returns the token identifier corresponding
   * to the next token and prepares to return the semantic value
   * and beginning/ending positions of the token.
   *
   * This is a wrapper around the internal yylex method to collect tokens such
   * as comments, whitespace, etc. to use them later on in the compiler's
   * output. Also, other necessary functionality can be put her (extracting
   * the full input text?)
   *
   * @return the token identifier corresponding to the next token.
   */
  public int yylex() throws java.io.IOException, QueryParseException {
    int result = yylex_internal();
    return result;
  }

  /**
   * Entry point for error reporting.  Emits an error
   * referring to the given location in a user-defined way.
   *
   * @param loc The location of the element to which the
   *                error message is related
   * @param msg The string for the error message.
   */
  public void yyerror(QueryParser.Location loc, String msg) {
    logger.error("{} at {}", msg, loc);
    throw new RuntimeException(new QueryParseException(msg + " at " + loc));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  QueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3716) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex_internal() throws java.io.IOException,   QueryParseException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new QueryParseException("Unexpected Character: '" + yytext() + "'");
            } 
            // fall through
          case 28: break;
          case 2: 
            { 
            } 
            // fall through
          case 29: break;
          case 3: 
            { yylval = yytext(); return QueryParser.Lexer.ID;
            } 
            // fall through
          case 30: break;
          case 4: 
            { return QueryParser.Lexer.INTERVALSTART;
            } 
            // fall through
          case 31: break;
          case 5: 
            { return QueryParser.Lexer.INTERVALEND;
            } 
            // fall through
          case 32: break;
          case 6: 
            { yylval = yytext();
                   return QueryParser.Lexer.ALLENRELATION;
            } 
            // fall through
          case 33: break;
          case 7: 
            { return (int) yytext().charAt(0);
            } 
            // fall through
          case 34: break;
          case 8: 
            { yybegin(STRING);
            } 
            // fall through
          case 35: break;
          case 9: 
            { string.append( yytext() );
            } 
            // fall through
          case 36: break;
          case 10: 
            { throw new QueryParseException("Unterminated string at end of line");
            } 
            // fall through
          case 37: break;
          case 11: 
            { yybegin(YYINITIAL);
                                  String s = string.toString();
                                  string.setLength(0);
                                  yylval = '"' + s + "\"^^<xsd:string>";
                                  return QueryParser.Lexer.ATOM;
            } 
            // fall through
          case 38: break;
          case 12: 
            { yylval = yytext(); return QueryParser.Lexer.VAR;
            } 
            // fall through
          case 39: break;
          case 13: 
            { yylval = yytext(); return QueryParser.Lexer.NOTEQ;
            } 
            // fall through
          case 40: break;
          case 14: 
            { yylval = yytext(); return QueryParser.Lexer.EQ;
            } 
            // fall through
          case 41: break;
          case 15: 
            { throw new QueryParseException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 42: break;
          case 16: 
            { yylval = yytext(); return QueryParser.Lexer.BLANK;
            } 
            // fall through
          case 43: break;
          case 17: 
            { return QueryParser.Lexer.ASK;
            } 
            // fall through
          case 44: break;
          case 18: 
            { return '!';
            } 
            // fall through
          case 45: break;
          case 19: 
            { yybegin(YYINITIAL);
                                           String s = string.toString();
                                           string.setLength(0);
                                           yylval = '"' + s + yytext();
                                           return QueryParser.Lexer.ATOM;
            } 
            // fall through
          case 46: break;
          case 20: 
            { yylval = yytext(); return QueryParser.Lexer.URI;
            } 
            // fall through
          case 47: break;
          case 21: 
            { return QueryParser.Lexer.WHERE;
            } 
            // fall through
          case 48: break;
          case 22: 
            { return QueryParser.Lexer.SELECT;
            } 
            // fall through
          case 49: break;
          case 23: 
            { return QueryParser.Lexer.FILTER;
            } 
            // fall through
          case 50: break;
          case 24: 
            { return QueryParser.Lexer.DISTINCT;
            } 
            // fall through
          case 51: break;
          case 25: 
            { return QueryParser.Lexer.SELECTALL;
            } 
            // fall through
          case 52: break;
          case 26: 
            { return QueryParser.Lexer.AGGREGATE;
            } 
            // fall through
          case 53: break;
          case 27: 
            { yybegin(YYINITIAL);
                                String s = string.toString();
                                string.setLength(0);
                                yylval = '"' + s + yytext();
                                return QueryParser.Lexer.ATOM;
            } 
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
