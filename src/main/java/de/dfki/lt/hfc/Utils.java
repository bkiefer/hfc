package de.dfki.lt.hfc;

import java.util.List;

public class Utils {

  public static int[] toPrimitive(List<Integer> l) {
    int[] result = new int[l.size()];
    for (int i = 0; i < result.length; ++i) result[i] = l.get(i);
    return result;
  }

  public static String escapeDoublequotes(String s) {
    int l = s.length();
    if (l == 0) return s;
    StringBuilder sb = new StringBuilder((int) (l * 1.3));
    if (s.charAt(0) == '"') sb.append('\\');
    int i, c = 0;
    while ((i = s.indexOf('"', c + 1)) >= 0) {
      sb.append(s.substring(c, i));
      if (s.charAt(i - 1) != '\\') {
        sb.append('\\');
      }
      c = i;
    }
    sb.append(s.substring(c));
    return sb.toString();
  }

  /**
   * Puts a backslash in front of every backslash and double quote in the
   * string s
   */
  public static String stringToExternal(String s) {
    int l = s.length();
    if (l == 0) return s;
    StringBuilder sb = new StringBuilder((int) (l * 1.3));
    int i = 0;
    do {
      char c = s.charAt(i);
      if (c == '"' || c == '\\') sb.append('\\');
      sb.append(c);
      ++i;
    } while (i < l);
    return sb.toString();
  }

  /**
   * Assumes that the input string s was generated by stringToExternal and
   * removes backslashes that are not preceded by a backslash.
   */
  public static String externalToString(String s) {
    int l = s.length();
    if (l == 0) return s;
    StringBuilder sb = new StringBuilder(l);
    int i = 0;
    do {
      char c = s.charAt(i);
      if (c == '\\') {
        c = s.charAt(++i);
        // only remove the backslash if followed by " or \
        if (c != '"' && c != '\\') sb.append('\\');
      }
      sb.append(c);
      ++i;
    } while (i < l);
    return sb.toString();
  }

  /* Factor 5+ slower than the solution above
  public static String escapeDQs(String s) {
    return s.replaceAll("(^|[^\\\\])\"", "$1\\\\\\\"");
  }
  */

}
